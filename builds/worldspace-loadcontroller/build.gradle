buildscript {
	repositories {
		//jcenter()
		maven {
			url "${artifactory_contextUrl}/plugins-release"
			credentials {
				username = "${artifactory_user}"
				password = "${artifactory_password}"
			}
		}
		dependencies {
			classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.2'
			classpath 'net.saliman:gradle-cobertura-plugin:2.2.8'
		}
	}
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'cobertura'
apply plugin: 'jacoco'

description = 'Worldspace Load Controller'
archivesBaseName = 'worldspace-loadcontroller'
group = 'com.deque'
jar.baseName = "${archivesBaseName}"
version = '5.4-SNAPSHOT'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
String publishRepo = isReleaseVersion ? 'libs-release-local' : 'libs-snapshot-local'

defaultTasks 'clean', 'build', 'test', 'uberJar'
ext.groovyVersion = System.getenv('GROOVY_VERSION') ?: '2.4.5'
println "Using Groovy ${groovyVersion}"
println "Using Gradle ${GradleVersion.current().getVersion()}"
println "Building ${archivesBaseName}-${version}"
println "Publish Repo is ${publishRepo}"

def mainClassName = "${group}.server.spider.LoadController"
def compatibilityVersion = 1.8
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion
println "sourceCompatibility is ${sourceCompatibility}"

def springVersion = '4.2.2.RELEASE'
def slf4jVersion = '1.7.12'

idea {
	module {
		downloadJavadoc = true
	}
}

eclipse {
	classpath {
		downloadJavadoc = true
	}
}
artifactory {
	//The base Artifactory URL if not overridden by the publisher/resolver
	contextUrl = "${artifactory_contextUrl}"
	publish {
		repository {
			repoKey = publishRepo
			username = "${artifactory_user}"
			password = "${artifactory_password}"
			maven = true
		}
		defaults {
            		publications ('myPublication')
        	}
	}
	resolve {
		repository {
			repoKey = 'libs-snapshot'
			username = "${artifactory_user}"
			password = "${artifactory_password}"
			maven = true

		}
	}
}
configurations.all {
	resolutionStrategy.force 'ch.qos.logback:logback-core:1.1.3','ch.qos.logback:logback-classic:1.1.3'
}

repositories {

	//only if gradle called with property like -PuseMavenLocal
	if(project.hasProperty("useMavenLocal")) {
   		mavenLocal()
	}
	maven {
		url "${artifactory_contextUrl}/plugins-release"
		credentials {
			username = "${artifactory_user}"
			password = "${artifactory_password}"
		}
	}
	//only called if not found in plugins-release
	maven {
		url "${artifactory_contextUrl}/libs-snapshot"
		credentials {
			username = "${artifactory_user}"
			password = "${artifactory_password}"
		}
	}
	//only called if not found in artifactory
	//jcenter()

}

dependencies {
	compile "com.deque:worldspace-commons:${version}"
	// Spring Framework Dependenices
	compile "org.springframework:spring-beans:${springVersion}"
	compile "org.springframework:spring-context:${springVersion}"
	compile "org.springframework:spring-core:${springVersion}"
	compile "org.springframework:spring-expression:${springVersion}"
	compile "org.springframework:spring-web:${springVersion}"
	compile 'com.fasterxml.jackson.core:jackson-core:2.6.4'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.6.4'
	compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.4'
	compile 'com.amazonaws:aws-java-sdk:1.10.19'

	compile 'org.projectlombok:lombok:1.16.6'
	compile 'log4j:log4j:1.2.17'
	compile "org.slf4j:slf4j-api:${slf4jVersion}"

	// sfl4j is just a facade for loggers. To actually get logging to work, you need to
	// tie it in with some actual implementation, e.g., logback
	compile "org.slf4j:slf4j-log4j12:${slf4jVersion}"
	//compile group: 'ch.qos.logback', name:'logback-classic', version: '1.1.3'
	//compile group: 'ch.qos.logback', name:'logback-core', version: '1.1.3'
	// JSR 330 annotation support
	compile "javax.inject:javax.inject:1"

	// Spring unit testing support
	testCompile "org.springframework:spring-test:${springVersion}"

	// Spock framework for unit testing
	testCompile("org.spockframework:spock-core:1.0-groovy-2.4") {
		exclude module: 'groovy-all'
	}
	testCompile("org.spockframework:spock-spring:1.0-groovy-2.4") {
		exclude module: 'groovy-all'
	}

	// optional dependencies for using Spock
	// only necessary if Hamcrest matchers are used
	testCompile 'org.hamcrest:hamcrest-core:1.3'
	// allows mocking of classes (in addition to interfaces)
	testRuntime 'cglib:cglib-nodep:3.2.0'
	// allows mocking of classes without default constructor (together with CGLIB)
	testRuntime 'org.objenesis:objenesis:2.2'
	// run junit tests as well
	testCompile 'junit:junit:4.12'

	//make sure proper logging framework is used
	testRuntime 'org.slf4j:slf4j-api:1.7.12'
	testRuntime 'ch.qos.logback:logback-classic:1.1.3'
	testRuntime 'ch.qos.logback:logback-core:1.1.3'
	// Groovy
	compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
	// Local Groovy use is potentially dangerous, as it may differ from gradle
	//compile localGroovy()
}

test {
	reports.html.enabled = true
	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// set heap size for the test JVM(s)
	minHeapSize = '128m'
	maxHeapSize = '512m'
	systemProperties 'logback.configurationFile' : new File(projectDir,'src/test/resources/logback.groovy').absolutePath
  //'log4j.configuration' : new File(projectDir,'src/test/resources/log4j.properties').absolutePath
	//systemProperty 'logback.configurationFile', "file:$projectDir/test/logback-test.xml"
	// set JVM arguments for the test JVM(s)
	jvmArgs '-XX:MaxPermSize=256m'

	testLogging {
		// set options for log level LIFECYCLE
		events "failed"
		exceptionFormat "short"
		showCauses true
		showExceptions true
		showStackTraces true
		// set options for log level DEBUG
		debug {
			events "started", "skipped", "failed"
			exceptionFormat "full"
		}

		// remove standard output/error logging from --info builds
		// by assigning only 'failed' and 'skipped' events
		info.events = ["failed", "skipped"]
		//have to invoke jacoco manually
		finalizedBy(project.tasks.cobertura)
	}
/*
	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
		logger.lifecycle('Running test: ' + descriptor)
	}

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
		logger.lifecycle('Test: ' + descriptor + ' produced standard out/err: ' + event.message)
	}*/
}

// Creates executable standalone JAR file of the application
task uberJar(type: Jar, dependsOn: [':compileJava', ':compileGroovy']) {
	from files(sourceSets.main.output.classesDir)
	from files(sourceSets.main.output.resourcesDir)
	from(configurations.runtime.asFileTree.files.collect { zipTree(it) }) {
		exclude "META-INF/*.SF"
		exclude "META-INF/*.DSA"
		exclude "META-INF/*.RSA"
	}
	manifest {
		attributes 'Implementation-Title': "${description}",
				'Implementation-Version': version,
				'Built-By': System.getProperty('user.name'),
				'Built-Date': new Date(),
				'Built-JDK': System.getProperty('java.version'),
				'Main-Class': mainClassName
	}
}
jacocoTestReport {
	additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
	sourceDirectories = files(sourceSets.main.allSource.srcDirs)
	classDirectories = files(sourceSets.main.output)
	executionData = files(jacocoTestReport.executionData)
	reports {
		html.enabled = true
		xml.enabled = true
		csv.enabled = false
	}
}

//http://jdpgrailsdev.github.io/blog/2014/04/29/gradle_cobertura.html
//https://github.com/stevesaliman/gradle-cobertura-plugin/blob/master/usage.md

cobertura {
	//fix cobertura version
	//https://github.com/stevesaliman/gradle-cobertura-plugin/issues/72
	//coberturaVersion = '2.1.1'
	//coberturaVersion = '2.0.3'
	coverageFormats = ['html', 'xml']
	coverageIgnoreTrivial = true
	coverageIgnores = ['org.slf4j.Logger.*']
	coverageExcludes = ['.*package-info.*', 'net\\.gleske\\.jervis\\.exceptions\\..*']

	//coberturaCheck values 80% (./gradlew coberturaCheck test)
	//coverageCheckBranchRate = 80
	//coverageCheckLineRate = 80
	coverageCheckPackageBranchRate = 50
	coverageCheckPackageLineRate = 80
	coverageCheckTotalBranchRate = 50
	coverageCheckTotalLineRate = 80
	coverageCheckHaltOnFailure = true

}

//http://www.gradle.org/docs/current/userguide/gradle_wrapper.html
//generate gradlew with: gradle wrapper
task wrapper(type: Wrapper) {
	gradleVersion = '2.9'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	//from 'build/docs/javadoc'
	from groovydoc.destinationDir
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

artifacts {
	archives uberJar
}

//signing {
//	required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }/
//	sign configurations.archives
//}

task printBuildScriptClasspath << {
	println project.buildscript.configurations.classpath.asPath
}

task run (type: JavaExec, dependsOn: classes){
    if(project.hasProperty('myargs')){
        args(myargs.split(','))
    }
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
}


publishing {
  publications {
    myPublication(MavenPublication) {
      //from components.java
      artifact uberJar
    }
  }
}

artifactoryPublish {
	dependsOn uberJar

	publications ('myPublication')

	clientConfig.publisher.repoKey = publishRepo
	clientConfig.publisher.username = "${artifactory_user}"
	clientConfig.publisher.password = "${artifactory_password}"
}
